#!/usr/bin/env python

import rospy
from visualization_msgs.msg import Marker
from geometry_msgs.msg import Point

def mark_circles_at_coordinates():
    rospy.init_node('circle_marker_node')

    # Create a publisher for the Marker topic
    marker_pub = rospy.Publisher('/visualization_marker', Marker, queue_size=10)

    # Create a Marker message
    marker = Marker()
    marker.header.frame_id = "world"  # Use the world frame for placement
    marker.header.stamp = rospy.Time.now()
    marker.ns = "circle_marker"
    marker.id = 0
    marker.type = Marker.SPHERE
    marker.action = Marker.ADD

    # Set the circle's color (e.g., red)
    marker.color.r = 1.0
    marker.color.g = 0.0
    marker.color.b = 0.0
    marker.color.a = 1.0

    # Set the scale (size of the circle)
    marker.scale.x = 0.2  # Diameter of the circle
    marker.scale.y = 0.2  # Diameter of the circle
    marker.scale.z = 0.01  # Small height to keep it a 2D representation

    # List of coordinates where you want to place circles (x, y, z)
    coordinates = [
        (1.0, 1.0, 0.0),
        (2.0, 3.0, 0.0),
        (3.0, 2.0, 0.0),
        (4.0, 4.0, 0.0)
    ]

    # Create markers at each of the coordinates
    for i, (x, y, z) in enumerate(coordinates):
        marker.pose.position.x = x
        marker.pose.position.y = y
        marker.pose.position.z = z
        marker.id = i  # Unique ID for each marker

        # Publish the marker
        marker_pub.publish(marker)
        rospy.sleep(0.1)

if __name__ == '__main__':
    try:
        mark_circles_at_coordinates()
    except rospy.ROSInterruptException:
        pass

