// Generated by gencpp from file local_inn/pose_communicationRequest.msg
// DO NOT EDIT!


#ifndef LOCAL_INN_MESSAGE_POSE_COMMUNICATIONREQUEST_H
#define LOCAL_INN_MESSAGE_POSE_COMMUNICATIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace local_inn
{
template <class ContainerAllocator>
struct pose_communicationRequest_
{
  typedef pose_communicationRequest_<ContainerAllocator> Type;

  pose_communicationRequest_()
    : lidar_data()  {
    }
  pose_communicationRequest_(const ContainerAllocator& _alloc)
    : lidar_data(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _lidar_data_type;
  _lidar_data_type lidar_data;





  typedef boost::shared_ptr< ::local_inn::pose_communicationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::local_inn::pose_communicationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct pose_communicationRequest_

typedef ::local_inn::pose_communicationRequest_<std::allocator<void> > pose_communicationRequest;

typedef boost::shared_ptr< ::local_inn::pose_communicationRequest > pose_communicationRequestPtr;
typedef boost::shared_ptr< ::local_inn::pose_communicationRequest const> pose_communicationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::local_inn::pose_communicationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::local_inn::pose_communicationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::local_inn::pose_communicationRequest_<ContainerAllocator1> & lhs, const ::local_inn::pose_communicationRequest_<ContainerAllocator2> & rhs)
{
  return lhs.lidar_data == rhs.lidar_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::local_inn::pose_communicationRequest_<ContainerAllocator1> & lhs, const ::local_inn::pose_communicationRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace local_inn

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::local_inn::pose_communicationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::local_inn::pose_communicationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::local_inn::pose_communicationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::local_inn::pose_communicationRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::local_inn::pose_communicationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::local_inn::pose_communicationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::local_inn::pose_communicationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8044b6ad75eddb910fb8489678496d7f";
  }

  static const char* value(const ::local_inn::pose_communicationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8044b6ad75eddb91ULL;
  static const uint64_t static_value2 = 0x0fb8489678496d7fULL;
};

template<class ContainerAllocator>
struct DataType< ::local_inn::pose_communicationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "local_inn/pose_communicationRequest";
  }

  static const char* value(const ::local_inn::pose_communicationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::local_inn::pose_communicationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Request\n"
"float32[] lidar_data  # LIDAR scan data (array of floats)\n"
"\n"
;
  }

  static const char* value(const ::local_inn::pose_communicationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::local_inn::pose_communicationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lidar_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pose_communicationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::local_inn::pose_communicationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::local_inn::pose_communicationRequest_<ContainerAllocator>& v)
  {
    s << indent << "lidar_data[]" << std::endl;
    for (size_t i = 0; i < v.lidar_data.size(); ++i)
    {
      s << indent << "  lidar_data[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.lidar_data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCAL_INN_MESSAGE_POSE_COMMUNICATIONREQUEST_H
