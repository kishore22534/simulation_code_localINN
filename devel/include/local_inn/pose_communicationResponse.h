// Generated by gencpp from file local_inn/pose_communicationResponse.msg
// DO NOT EDIT!


#ifndef LOCAL_INN_MESSAGE_POSE_COMMUNICATIONRESPONSE_H
#define LOCAL_INN_MESSAGE_POSE_COMMUNICATIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace local_inn
{
template <class ContainerAllocator>
struct pose_communicationResponse_
{
  typedef pose_communicationResponse_<ContainerAllocator> Type;

  pose_communicationResponse_()
    : pose()  {
      pose.assign(0.0);
  }
  pose_communicationResponse_(const ContainerAllocator& _alloc)
    : pose()  {
  (void)_alloc;
      pose.assign(0.0);
  }



   typedef boost::array<float, 3>  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::local_inn::pose_communicationResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::local_inn::pose_communicationResponse_<ContainerAllocator> const> ConstPtr;

}; // struct pose_communicationResponse_

typedef ::local_inn::pose_communicationResponse_<std::allocator<void> > pose_communicationResponse;

typedef boost::shared_ptr< ::local_inn::pose_communicationResponse > pose_communicationResponsePtr;
typedef boost::shared_ptr< ::local_inn::pose_communicationResponse const> pose_communicationResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::local_inn::pose_communicationResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::local_inn::pose_communicationResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::local_inn::pose_communicationResponse_<ContainerAllocator1> & lhs, const ::local_inn::pose_communicationResponse_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::local_inn::pose_communicationResponse_<ContainerAllocator1> & lhs, const ::local_inn::pose_communicationResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace local_inn

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::local_inn::pose_communicationResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::local_inn::pose_communicationResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::local_inn::pose_communicationResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::local_inn::pose_communicationResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::local_inn::pose_communicationResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::local_inn::pose_communicationResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::local_inn::pose_communicationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e7af384a7bc934f230231c255c5249e";
  }

  static const char* value(const ::local_inn::pose_communicationResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e7af384a7bc934fULL;
  static const uint64_t static_value2 = 0x230231c255c5249eULL;
};

template<class ContainerAllocator>
struct DataType< ::local_inn::pose_communicationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "local_inn/pose_communicationResponse";
  }

  static const char* value(const ::local_inn::pose_communicationResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::local_inn::pose_communicationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Response\n"
"float32[3] pose  # x, y, theta\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::local_inn::pose_communicationResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::local_inn::pose_communicationResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pose_communicationResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::local_inn::pose_communicationResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::local_inn::pose_communicationResponse_<ContainerAllocator>& v)
  {
    s << indent << "pose[]" << std::endl;
    for (size_t i = 0; i < v.pose.size(); ++i)
    {
      s << indent << "  pose[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pose[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCAL_INN_MESSAGE_POSE_COMMUNICATIONRESPONSE_H
